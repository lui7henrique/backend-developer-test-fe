/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Backend Developer Test
 * OpenAPI spec version: 0.0.1
 */
export type PostDoctorsBody = {
  username: string;
  firstName: string;
  lastName: string;
  email: string;
};

export type PostDoctors201Doctor = {
  id: string;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  createdAt: string;
};

export type PostDoctors201 = {
  doctor: PostDoctors201Doctor;
};

export type GetDoctors200Item = {
  id: string;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  createdAt: string;
};

export type PostSlotsBodyRecurrenceType = typeof PostSlotsBodyRecurrenceType[keyof typeof PostSlotsBodyRecurrenceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostSlotsBodyRecurrenceType = {
  NONE: 'NONE',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
} as const;

export type PostSlotsBody = {
  doctorId: string;
  startTime: string;
  endTime: string;
  /** @nullable */
  startDate?: string | null;
  /** @nullable */
  endDate?: string | null;
  recurrenceType?: PostSlotsBodyRecurrenceType;
  createdAt?: string;
  updatedAt?: string;
};

export type PostSlots201NewSlotsItemRecurrenceType = typeof PostSlots201NewSlotsItemRecurrenceType[keyof typeof PostSlots201NewSlotsItemRecurrenceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostSlots201NewSlotsItemRecurrenceType = {
  NONE: 'NONE',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
} as const;

export type PostSlots201NewSlotsItem = {
  id: string;
  doctorId: string;
  startTime: string;
  endTime: string;
  /** @nullable */
  startDate: string | null;
  /** @nullable */
  endDate: string | null;
  recurrenceType: PostSlots201NewSlotsItemRecurrenceType;
  createdAt: string;
  updatedAt: string;
};

export type PostSlots201 = {
  newSlots: PostSlots201NewSlotsItem[];
};

export type GetDoctorsDoctorIdAvailableSlotsParams = {
startDate?: string & string;
endDate?: string & string;
};

export type PostSlotsSlotIdBookBody = {
  startTime: string;
  endTime: string;
  patientEmail: string;
};

export type GetDoctorsDoctorIdBooked200BookedSlotsItemRecurrenceType = typeof GetDoctorsDoctorIdBooked200BookedSlotsItemRecurrenceType[keyof typeof GetDoctorsDoctorIdBooked200BookedSlotsItemRecurrenceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDoctorsDoctorIdBooked200BookedSlotsItemRecurrenceType = {
  NONE: 'NONE',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
} as const;

export type GetDoctorsDoctorIdBooked200BookedSlotsItem = {
  id: string;
  doctorId: string;
  startTime: string;
  endTime: string;
  /** @nullable */
  startDate: string | null;
  /** @nullable */
  endDate: string | null;
  recurrenceType: GetDoctorsDoctorIdBooked200BookedSlotsItemRecurrenceType;
  createdAt: string;
  updatedAt: string;
  appointmentId: string;
};

export type GetDoctorsDoctorIdBooked200 = {
  bookedSlots: GetDoctorsDoctorIdBooked200BookedSlotsItem[];
};

/**
 * Create a doctor
 */
export const getPostDoctorsUrl = () => {


  

  return `https://backend-developer-test-tdj0l.kinsta.app/doctors`
}

export const postDoctors = async (postDoctorsBody: PostDoctorsBody, options?: RequestInit): Promise<PostDoctors201> => {
  
  const res = await fetch(getPostDoctorsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postDoctorsBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostDoctors201 = body ? JSON.parse(body) : {}

  return data
}



/**
 * Get all doctors
 */
export const getGetDoctorsUrl = () => {


  

  return `https://backend-developer-test-tdj0l.kinsta.app/doctors`
}

export const getDoctors = async ( options?: RequestInit): Promise<GetDoctors200Item[]> => {
  
  const res = await fetch(getGetDoctorsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetDoctors200Item[] = body ? JSON.parse(body) : {}

  return data
}



/**
 * Create a slot
 */
export const getPostSlotsUrl = () => {


  

  return `https://backend-developer-test-tdj0l.kinsta.app/slots`
}

export const postSlots = async (postSlotsBody: PostSlotsBody, options?: RequestInit): Promise<PostSlots201> => {
  
  const res = await fetch(getPostSlotsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postSlotsBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostSlots201 = body ? JSON.parse(body) : {}

  return data
}



/**
 * Get all available slots for a doctor
 */
export const getGetDoctorsDoctorIdAvailableSlotsUrl = (doctorId: string,
    params?: GetDoctorsDoctorIdAvailableSlotsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://backend-developer-test-tdj0l.kinsta.app/doctors/${doctorId}/available_slots?${stringifiedParams}` : `https://backend-developer-test-tdj0l.kinsta.app/doctors/${doctorId}/available_slots`
}

export const getDoctorsDoctorIdAvailableSlots = async (doctorId: string,
    params?: GetDoctorsDoctorIdAvailableSlotsParams, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getGetDoctorsDoctorIdAvailableSlotsUrl(doctorId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



/**
 * Create an appointment
 */
export const getPostSlotsSlotIdBookUrl = (slotId: string,) => {


  

  return `https://backend-developer-test-tdj0l.kinsta.app/slots/${slotId}/book`
}

export const postSlotsSlotIdBook = async (slotId: string,
    postSlotsSlotIdBookBody: PostSlotsSlotIdBookBody, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getPostSlotsSlotIdBookUrl(slotId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postSlotsSlotIdBookBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



/**
 * Get all booked slots for a doctor
 */
export const getGetDoctorsDoctorIdBookedUrl = (doctorId: string,) => {


  

  return `https://backend-developer-test-tdj0l.kinsta.app/doctors/${doctorId}/booked`
}

export const getDoctorsDoctorIdBooked = async (doctorId: string, options?: RequestInit): Promise<GetDoctorsDoctorIdBooked200> => {
  
  const res = await fetch(getGetDoctorsDoctorIdBookedUrl(doctorId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetDoctorsDoctorIdBooked200 = body ? JSON.parse(body) : {}

  return data
}
